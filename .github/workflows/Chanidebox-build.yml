

#===============================================
# Description: 我家云 Armbian 编译脚本
# File name: Chainedbox-build.yml
# Lisence: MIT
# Author: WingonWu
# https://github.com/WingonWu/Chainedbox-build
#===============================================

name: 我家云 Armbian
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  repository_dispatch:
  workflow_dispatch:
  schedule:
# 自动编译时间
    - cron: '0 22 * * *'
    
#环境变量配置
env:
  REPO_URL: https://github.com/armbian/build
  REPO_BRANCH: master
  BOARD: rock64
  BRANCH: edge
  RELEASE: buster
  BUILD_MINIMAL: no
  BUILD_DESKTOP: no
  KERNEL_ONLY: yes
  KERNEL_CONFIGURE: yes
  TZ: Asia/Shanghai
#---------------------------------------
  FEEDS_CONF: armv8/plus/feeds.conf.default
  CONFIG_FILE: armv8/plus/.config
  DIY_P1_SH: armv8/plus/diy-part1.sh
  DIY_P2_SH: armv8/plus/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: ROOTFS_PLUS
  PRODUCT_NAME: ARMv8_PLUS

#-------------------------------------------
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH armian
        ln -sf /workdir/armian $GITHUB_WORKSPACE/armian
        cd armian
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV

    - name: Install patch
      run: cp –r $GITHUB_WORKSPACE/$userpatches/ armbian 

    - name: Compile the firmware
      id: compile
      run: |
        cd armian
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: armian_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: armian/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cp armian/.config build.config
        mkdir -p Packages
        cp -rf armian/bin/packages/*/*/*.ipk Packages
        tar -zcvf Packages.tar.gz Packages
        mv *.config *.tar.gz armian/bin/targets/*/*
        cp -rf armian/bin/targets lean
        rm -rf armian/* && cd lean/*/*
        rm -rf packages feeds.buildinfo sha256sums version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

      - name: 系统镜像打包
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find ./output/ -name "*img" | xargs -i sudo xz -v {} 
          find ./output/ -name "*img*" | xargs -i sudo mv -f {} ./artifact/
      - name: 上传系统镜像
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: Armbian_bullseye
          path: ./artifact/
          ${{ env.useVersionInfo }}
