

#===============================================
# Description: 我家云 Armbian 编译脚本
# File name: Chainedbox-build.yml
# Lisence: MIT
# Author: WingonWu
# https://github.com/WingonWu/Chainedbox-build
#===============================================

name: 我家云 Armbian

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
# 自动编译时间
    - cron: '0 22 * * *'
    
#环境变量配置
env:
  REPO_URL: https://github.com/armbian/build
  REPO_BRANCH: master
  BOARD: rock64
  BRANCH: edge
  RELEASE: buster
  BUILD_MINIMAL: no
  BUILD_DESKTOP: no
  KERNEL_ONLY: yes
  KERNEL_CONFIGURE: yes
  TZ: Asia/Shanghai
#---------------------------------------
  FEEDS_CONF: armv8/plus/feeds.conf.default
  CONFIG_FILE: armv8/plus/.config
  DIY_P1_SH: armv8/plus/diy-part1.sh
  DIY_P2_SH: armv8/plus/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: ROOTFS_PLUS
  PRODUCT_NAME: ARMv8_PLUS

#-------------------------------------------
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检出
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH armbian
        ln -sf /workdir/armbian $GITHUB_WORKSPACE/armbian
        cd armbian
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV


    - name: 编译系统
      id: compile
      run: |
        cd armbian
        sudo ./compile.sh  BOARD= $BOARD BRANCH= $BRANCH RELEASE= $RELEASE BUILD_MINIMAL= $BUILD_MINIMAL BUILD_DESKTOP= $BUILD_DESKTOP KERNEL_ONLY= $KERNEL_ONLY KERNEL_CONFIGURE= $KERNEL_CONFIGURE 
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: 运行单行脚本
        run: sudo apt-get update && sudo apt-get upgrade && sudo apt-get install libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf
      - name: 运行单行脚本
        run: sudo ./compile.sh  BOARD=rock64 BRANCH=edge RELEASE=buster BUILD_MINIMAL=no BUILD_DESKTOP=no KERNEL_ONLY=yes KERNEL_CONFIGURE=yes 
      # Runs a set of commands using the runners shell
      #- name: 运行多行脚本
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.
      - name: 系统镜像打包
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find ./output/ -name "*img" | xargs -i sudo xz -v {} 
          find ./output/ -name "*img*" | xargs -i sudo mv -f {} ./artifact/
      - name: 上传系统镜像
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: Armbian_bullseye
          path: ./artifact/
